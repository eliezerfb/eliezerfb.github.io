<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Eliézer Bourchardt Personal Blog</title><link href="http://eliezerfb.eti.br/" rel="alternate"></link><link href="http://eliezerfb.eti.br/feeds/all.atom.xml" rel="self"></link><id>http://eliezerfb.eti.br/</id><updated>2018-03-31T20:23:00-03:00</updated><entry><title>Dicas de Data Cleaning</title><link href="http://eliezerfb.eti.br/dicas-cata-cleaning.html" rel="alternate"></link><published>2018-03-31T20:23:00-03:00</published><updated>2018-03-31T20:23:00-03:00</updated><author><name>Eliézer</name></author><id>tag:eliezerfb.eti.br,2018-03-31:/dicas-cata-cleaning.html</id><summary type="html">&lt;p&gt;Algumas dicas e para efetuar limpeza em dados&lt;/p&gt;</summary><content type="html">&lt;p&gt;O processo de limpeza e preparação dos dados representa cerca de 80% do trabalho de um cientista de dados. Datas em diversos formatos, diversos encodings, dados incompletos, erros de digitação são muito comuns. Antes de realizar qualquer análise é necessário tratar estes problemas. Neste post reúno algumas dicas de pré-processamento que são úteis no dia-a-dia.&lt;/p&gt;
&lt;h2&gt;Manipulação de Dados Faltantes&lt;/h2&gt;
&lt;p&gt;Para obter o número de pontos de dados perdidos por coluna, podemos utilizar o código:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;missing_values_count = df.isnull().sum()
total_cells = np.product(df.shape)
total_missing = missing_values_count.sum()
print((total_missing/total_cells) * 100)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Também podemos visualizar os dados faltantes com a ajuda da biblioteca &lt;a href="https://github.com/ResidentMario/missingno"&gt;missingno&lt;/a&gt;. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install missingno
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Esta biblioteca permite diversas visualizações, abaixo é possível ver um exemplo de código:    &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;quilt.data.ResidentMario&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;missingno_data&lt;/span&gt;
&lt;span class="n"&gt;collisions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;missingno_data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nyc_injurious_collisions&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;collisions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;collisions&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"nan"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nan&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;missingno&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;msno&lt;/span&gt;
&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;matplotlib&lt;/span&gt; &lt;span class="n"&gt;inline&lt;/span&gt;
&lt;span class="n"&gt;msno&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;matrix&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;collisions&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sample&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;250&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href="http://eliezerfb.eti.br/images/msgno.png"&gt;msgno example&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Mas nem todos dados faltantes são erros. Nesse momento é necessário se perguntar: &lt;strong&gt;um dado faltante é porque não foi gravado ou porque não existe?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Se um valor é faltante porque ele não existe (como a altura do filho mais velho de quem não tem filhos), então não faz sentido tentar adivinhar este valor. Estes valores devem ser mantidos como NaN. Por outro lado, se um valor não existe porque não foi gravado, então podemos tentar adivinhar seu valor baseado em outros valores nesta coluna e linha. &lt;/p&gt;
&lt;p&gt;Veja também:
&lt;a href="https://www.kaggle.com/rtatman/data-cleaning-challenge-handling-missing-values"&gt;Data cleaning challenge by Kaggle&lt;/a&gt; &lt;/p&gt;</content><category term="data science"></category><category term="data cleaning"></category></entry><entry><title>Um blog com Pelican e Github Pages</title><link href="http://eliezerfb.eti.br/blog-python-pelican.html" rel="alternate"></link><published>2018-03-31T15:00:00-03:00</published><updated>2018-03-31T15:00:00-03:00</updated><author><name>Eliézer</name></author><id>tag:eliezerfb.eti.br,2018-03-31:/blog-python-pelican.html</id><summary type="html">&lt;p&gt;Como utilizar o Pelican para criar um blog pessoal.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Na necessidade de criar um blog pessoal de maneira prática e barata (no caso, sem custos) encontrei o &lt;a href="http://docs.getpelican.com/en/stable/"&gt;Pelican&lt;/a&gt;.
O Pelican é um gerador de páginas estáticas feito em Python. Com ele não é necessário utilizar outras ferramentas como Django, Web2Py ou Wordpress. Como não precisa utilizar banco de dados (é apenas HTML estático) o conteúdo do blog fica em documentos de texto, facilitando qualquer futura migração.&lt;/p&gt;
&lt;p&gt;Para hospedar o blog optei por utilizar o &lt;a href="https://pages.github.com/"&gt;GitHub Pages&lt;/a&gt;. É uma opção gratuíta que permite utilizar domínio próprio além de facilitar pois publico meu blog utilizando o git.&lt;/p&gt;
&lt;p&gt;Para utilizar o Pelican é recomendado criar um ambiente virtual. Utilizei o &lt;a href="https://www.anaconda.com/"&gt;Anaconda&lt;/a&gt; para criar o ambiente virtual (mas pode ser utilizado o virtualenv também):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ conda create -n pelican-env &lt;span class="nv"&gt;python&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;.6
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Ative o ambiente virtual:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;source&lt;/span&gt; activate pelican-env
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Com o ambiente virtual ativo instale o Pelican e o Markdown com o pip:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pip install pelican markdown
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;No GitHub é necessário criar um novo projeto e seu nome deve ser &lt;strong&gt;username-do-github.github.io&lt;/strong&gt;. No seu diretório de projeto crie um diretório com este mesmo nome.&lt;/p&gt;
&lt;p&gt;Dentro deste novo diretório gere o projeto pelo Pelican:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pelican-quickstart
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Este script realiza algumas perguntas para gerar o website:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Título do seu site.&lt;/li&gt;
&lt;li&gt;Nome do autor.&lt;/li&gt;
&lt;li&gt;Idioma padrão.&lt;/li&gt;
&lt;li&gt;Se deseja utilizar uma URL personalizada.&lt;/li&gt;
&lt;li&gt;URL personalizada (se informado Y na opção acima).&lt;/li&gt;
&lt;li&gt;Habilitar paginação nos posts.&lt;/li&gt;
&lt;li&gt;Fuso horário (deixe America/Sao_Paulo)&lt;/li&gt;
&lt;li&gt;Do you want to generate a Fabfile/Makefile to automate generation and publishing? Y - Esta opção facilita a geração do site, pois automatiza a sua geração e publicação.&lt;/li&gt;
&lt;li&gt;Recarregamento automático do server em desenvolvimento (informe Y).&lt;/li&gt;
&lt;li&gt;As próximas perguntas se referem onde você vai deixar hospedado (FTP, SSH, Dropbox, S3, Rackspace e GitHub Pages), responda Y apenas para GitHub Pages.&lt;/li&gt;
&lt;li&gt;Is this your personal page (username.github.io), informe Y para confirmar.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Pronto! O projeto já está disponível em seu diretório.&lt;/p&gt;
&lt;h2&gt;Versionamento&lt;/h2&gt;
&lt;p&gt;Agora que o projeto está pronto é necessário iniciar o versionamento com git e adicionar o repositório remoto.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git init
$ git remote add origin git@github.com:username-do-github/username-do-github.github.io.git
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;É necessário organizar o projeto em 2 branchs:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;pelican&lt;/strong&gt;: os arquivos e códigos que gerarão o site estático.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;master&lt;/strong&gt;: os arquivos estáticos gerados;&lt;/p&gt;
&lt;p&gt;$ git checkout -b pelican
$ git add .
$ git commit -m 'start pelican branch'
$ git push origin pelican&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Para publicar o conteúdo estático na branch master é necessário utilizar o &lt;strong&gt;ghp-import&lt;/strong&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pip install ghp-import
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;E finalmente para gerar o site estático é só utilizar o &lt;strong&gt;make&lt;/strong&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ make github
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Para configurar um domínio personalizado&lt;/h2&gt;
&lt;p&gt;Este passo é opcional, caso deseje utilizar um domínio próprio.&lt;/p&gt;
&lt;p&gt;Dentro de /content crie um diretório chamado &lt;strong&gt;extra&lt;/strong&gt;. Neste diretório crie um arquivo chamado &lt;strong&gt;CNAME&lt;/strong&gt; com o nome de seu domínio.&lt;/p&gt;
&lt;p&gt;Em &lt;strong&gt;pelicanconf.py&lt;/strong&gt; adicione as seguintes linhas:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;STATIC_PATHS = ['extra/CNAME']
EXTRA_PATH_METADATA = {'extra/CNAME': {'path': 'CNAME'},}
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Para fazer o primeiro post&lt;/h2&gt;
&lt;p&gt;Para criar um post é só criar um arquivo markdown no diretório content, com a seguinte estrutura:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Title&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Título&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="n"&gt;post&lt;/span&gt;
&lt;span class="n"&gt;Date&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;yyyy&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;mm&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;dd&lt;/span&gt; &lt;span class="n"&gt;hh&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;mm&lt;/span&gt;
&lt;span class="n"&gt;Modified&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;yyyy&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;mm&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;dd&lt;/span&gt; &lt;span class="n"&gt;hh&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;mm&lt;/span&gt;
&lt;span class="n"&gt;Category&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Categoria&lt;/span&gt;
&lt;span class="n"&gt;Tags&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;tag&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tag&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tag&lt;/span&gt;
&lt;span class="n"&gt;Slug&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;link&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;amigavel&lt;/span&gt;
&lt;span class="n"&gt;Authors&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Nome&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="n"&gt;autor&lt;/span&gt;
&lt;span class="n"&gt;Summary&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Resumo&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="n"&gt;Post&lt;/span&gt;

&lt;span class="n"&gt;Conteúdo&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lembrando&lt;/span&gt; &lt;span class="n"&gt;de&lt;/span&gt; &lt;span class="n"&gt;usar&lt;/span&gt; &lt;span class="n"&gt;Markdown&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Dica: para editar o código em Markdown vale a pena olhar estes editores: &lt;a href="https://pandao.github.io/editor.md/en.html"&gt;editor.md&lt;/a&gt; ou &lt;a href="https://jbt.github.io/markdown-editor/"&gt;markdown editor&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Por fim é necessário utilizar o git para fazer o commit das alterações, enviar para o repositório no GitHub e publicar o post:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git add . 
$ git commit -m &lt;span class="s1"&gt;'first post'&lt;/span&gt; 
$ git push origin pelican 
$ make github
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Fontes:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://fnscoder.com/criando-um-blog-com-python-pelican-github-pages-e-dominio-personalizado.html"&gt;Criando um blog com Python pelican GitHub Pages e dominio personalizado&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://nafiulis.me/making-a-static-blog-with-pelican.html"&gt;Making a static blog with Pelican&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://rsip22.github.io/blog/create-a-blog-with-pelican-and-github-pages.html"&gt;Create a blog with Pelican and GitHub Pages&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://cherrymick.com/configure-a-custom-domain-name-with-pelican-and-github-pages.html"&gt;Configure a custom domain name with Pelican and Github Pages&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://pythonclub.com.br/criando-sites-estaticos-com-pelican.html"&gt;Criando sites estaticos com Pelican&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://docs.getpelican.com/en/3.6.3/tips.html"&gt;Docs Pelican 3.6.3&lt;/a&gt;&lt;/p&gt;</content><category term="pelican"></category><category term="publishing"></category><category term="web"></category></entry></feed>